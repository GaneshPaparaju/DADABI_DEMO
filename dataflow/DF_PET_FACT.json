{
	"name": "DF_PET_FACT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "sourceSTAGE"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableLOC_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceLOC"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBREED"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableDATE",
						"type": "DatasetReference"
					},
					"name": "sourceDATE"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableFACT_ID",
						"type": "DatasetReference"
					},
					"name": "FACTMAXID"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableFACT_ID",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinSTGLOC"
				},
				{
					"name": "joinSTGBREED"
				},
				{
					"name": "joinSTGDATE"
				},
				{
					"name": "joinSTGFACT"
				},
				{
					"name": "selectFACTTABLE"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSTAGE",
				"source(output(",
				"          LOCATION_SK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLOC",
				"source(output(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBREED",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDATE",
				"source(output(",
				"          MAX_LIC as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(PET_LIC_SK),0) as MAX_LIC FROM DADABI_SCHEMA.PET_LIC_FACT',",
				"     format: 'query') ~> FACTMAXID",
				"sourceSTAGE, sourceLOC join(sourceSTAGE@ZIP_CODE == sourceLOC@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSTGLOC",
				"joinSTGLOC, sourceBREED join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSTGBREED",
				"joinSTGBREED, sourceDATE join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSTGDATE",
				"joinSTGDATE, FACTMAXID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSTGFACT",
				"joinSTGFACT select(mapColumn(",
				"          LOCATION_SK,",
				"          DI_JOB_ID = sourceLOC@DI_JOB_ID,",
				"          DI_LOAD_DT = sourceLOC@DI_LOAD_DT,",
				"          BREED_SK,",
				"          DATE_DIM_SK,",
				"          PET_LIC_SK = MAX_LIC",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectFACTTABLE",
				"selectFACTTABLE keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(PET_LIC_SK = PET_LIC_SK + RowNum) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as string,",
				"          DATE_SK as string,",
				"          LOCATION_SK as string,",
				"          BREED_SK as string,",
				"          LIC_NUM as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK,",
				"          DATE_SK = DATE_DIM_SK,",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sink1"
			]
		}
	}
}