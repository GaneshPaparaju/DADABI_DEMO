{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "SOURCESTG"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBREEDDIM"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBREED"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinDataWithSK"
				},
				{
					"name": "aggregateBREEDKEYS"
				},
				{
					"name": "joinTOTARGET"
				},
				{
					"name": "filterEXISTINGROWS"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID_PARAM as string (\"10\")",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> SOURCESTG",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL (MAX(BREED_SK),0) as MaxBreedSK FROM DADABI_SCHEMA.BREED_DIM',",
				"     format: 'query') ~> sourceBREEDDIM",
				"source(output(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBREED",
				"SOURCESTG, sourceBREEDDIM join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDataWithSK",
				"joinDataWithSK aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          MAXBREEDSK),",
				"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBREEDKEYS",
				"aggregateBREEDKEYS, sourceBREED join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTOTARGET",
				"joinTOTARGET filter(isNull(SPECIES_NAME)&&isNull(PRIMARY_BREED_NAME)&&isNull(SECONDARY_BREED_NAME)) ~> filterEXISTINGROWS",
				"filterEXISTINGROWS keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(BREED_SK = MAXBREEDSK+RowNum,",
				"          DI_JOB_ID = $JOB_ID_PARAM,",
				"          DI_LOAD_DT = currentDate()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BREED_SK,",
				"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
				"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
				"          SPECIES_NAME = SPECIES,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> sink1"
			]
		}
	}
}