{
	"name": "DF_CLEAN_DATA_FROM_TSV",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText_Pet",
						"type": "DatasetReference"
					},
					"name": "ReadTSVFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable2",
						"type": "DatasetReference"
					},
					"name": "SNOWFLAKESINK"
				},
				{
					"dataset": {
						"referenceName": "Parquet3",
						"type": "DatasetReference"
					},
					"name": "SINKPARQUET"
				}
			],
			"transformations": [
				{
					"name": "TransposeColumns"
				},
				{
					"name": "PICKREQUIREDCOLUMNS"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID_PARAM as string (\"78\")",
				"}",
				"source(output(",
				"          {License Issue Date} as string,",
				"          {License Number} as string,",
				"          {Animal's Name} as string,",
				"          Species as string,",
				"          {Primary Breed} as string,",
				"          {Secondary Breed} as string,",
				"          {ZIP Code} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ReadTSVFile",
				"ReadTSVFile derive(LICENSE_ISSUE_DATE = toDate({License Issue Date}, 'MMMM dd yyyy'),",
				"          SECONDARY_BREED = iifNull({Secondary Breed}, 'Uknown'),",
				"          ZIP_CODE = lpad(toString({ZIP Code}),5,'0'),",
				"          SPECIES = upper(Species),",
				"          LICENSE_NUMBER = toInteger(translate({License Number}, 'S', '')),",
				"          ANIMALS_NAME = translate({Animal's Name}, '()[]', ''),",
				"          DI_JOB_ID = $JOB_ID_PARAM,",
				"          DI_LOAD_DT = currentDate()) ~> TransposeColumns",
				"TransposeColumns select(mapColumn(",
				"          LICENSE_ISSUE_DATE,",
				"          PRIMARY_BREED = {Primary Breed},",
				"          SECONDARY_BREED,",
				"          ZIP_CODE,",
				"          SPECIES = TransposeColumns@SPECIES,",
				"          LICENSE_NUMBER,",
				"          ANIMALS_NAME,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> PICKREQUIREDCOLUMNS",
				"PICKREQUIREDCOLUMNS sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LICENSE_ISSUE_DATE,",
				"          LICENSE_NUMBER,",
				"          ANIMAL_NAME = ANIMALS_NAME,",
				"          SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          ZIP_CODE,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     )) ~> SNOWFLAKESINK",
				"PICKREQUIREDCOLUMNS sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ARREST_KEY as string,",
				"          ARREST_DATE as string,",
				"          PD_CD as string,",
				"          PD_DESC as string,",
				"          KY_CD as string,",
				"          OFNS_DESC as string,",
				"          LAW_CODE as string,",
				"          LAW_CAT_CD as string,",
				"          ARREST_BORO as string,",
				"          ARREST_PRECINCT as string,",
				"          JURISDICTION_CODE as string,",
				"          AGE_GROUP as string,",
				"          PERP_SEX as string,",
				"          PERP_RACE as string,",
				"          X_COORD_CD as string,",
				"          Y_COORD_CD as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          NEW_GEOREFERENCED_COLUMN as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> SINKPARQUET"
			]
		}
	}
}